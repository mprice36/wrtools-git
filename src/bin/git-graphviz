#!/usr/bin/env bash

#HELP:COMMAND_NAME: Build and display a git repository graph using GraphViz
#HELP:Usage: COMMAND_NAME [options]* -- rev-list ...
#HELP:Options:
#HELP:  --help | -h: print this help
#HELP:  --verbose | -v: print debugging and status output
#HELP:  --keep-temps | -k: Don't delete temporary files

set -o nounset -o errexit
export LC_ALL=C

root_dir=$(dirname "$0")/..
. "$root_dir"/share/wrtools-core/opt_help.bash
. "$root_dir"/share/wrtools-core/opt_verbose.bash
. "$root_dir"/share/wrtools-core/fail.bash
. "$root_dir"/share/wrtools-core/temp.bash

#HELP:  --remote=$remote-name | -r $remote-name: point commits to URLs based on
#HELP:                                           a remote repo
unset remote
opt_remote () {
    (( $# == 1 ))|| fail_assert "$FUNCNAME expects 1 arg, a remote name"
    [[ is-set != ${remote+is-set} ]] || fail "Option --remote can only be used once"
    remote=$1
}

#HELP:  --all | -a: show all commits & refs in the repository
unset all
opt_all () {
    (( $# == 0 )) || fail_assert "$FUNCNAME expects 0 args (got $#)"
    all=true
}

#HELP:  --decorate | -d: Decorate logs: show branches, tags, and references
unset decorate
opt_decorate () {
    (( $# == 0 )) || fail_assert "$FUNCNAME expects 0 args (got $#)"
    decorate=true
}

#HELP:  --open | -o: open the HTML result file
unset open
opt_open () {
    (( $# == 0 ))|| fail_assert "$FUNCNAME expects 0 args (got $#)"
    open=true
}

#HELP:  --date=$date-flag: set date format using git log --date option
#HELP:      values: relative, local, default, iso, iso-strict, rfc, short, raw
unset date
opt_date () {
    (( $# == 1 )) || fail_assert "$FUNCNAME expects 1 args (got $#)"
    case $1 in
        relative | local | default | iso | iso-strict | rfc | short | raw ) date=$1;;
        * ) fail "Unknown value for --date ($1)";;
    esac
}

OPTIND=1
while getopts :adhkor:v-: OPTION
do
    case "$OPTION" in
        a ) opt_all;;
        d ) opt_decorate;;
        h ) opt_help;;
        k ) opt_keep_temps;;
        o ) opt_open;;
        r ) opt_remote "$OPTARG";;
        v ) opt_verbose;;
        - )
            case "$OPTARG" in
                all ) opt_all;;
                decorate ) opt_decorate;;
                help ) opt_help;;
                keep-temps ) opt_keep_temps;;
                open ) opt_open;;
                verbose ) opt_verbose;;
                all=* | help=* | keep-temps=* | verbose=* | open=* ) 
                    fail "No argument expected for long option \"${OPTARG%%=*}\"";;

                date=* ) opt_date "${OPTARG#*=}";;
                remote ) fail "Long option \"$OPTARG\" missing argument";;
                remote=* ) opt_remote "${OPTARG#*=}";;
                * ) fail "Unexpected long option \"$OPTARG\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail "bad state OPTARG=\"$OPTARG\"";;
    esac
done
shift $((OPTIND-1))

# $@ is git log args

if [[ true = ${all-false} ]]
then set -- --full-history --all
     decorate=true
fi

git_log=(git log)
if [[ is-set = ${date+is-set} ]]
then git_log+=( --date="$date" )
fi

temp_make_dir git_graphviz

if [[ is-set = ${remote+is-set} ]]
then true
elif remote=$(git config --get-regexp '^remote.[^.]*.url$' | sed -e '1s/^remote\.\([^\.]*\).url .*$/\1/p;d')
then true
fi
vecho "remote is ${remote-unset}"

unset remote_url
if remote_url=$(git config --get "remote.$remote.url")
then true
fi
vecho "remote_url is ${remote_url-unset}"

case ${remote_url-} in
    https://github.com/* )
        use_remote_url=${remote_url%.git}
        # params: $1 = short hash; $2 = long hash; $3 = summary
        render_node () {
            printf "\"%s\" [tooltip=\"%s\",URL=\"$use_remote_url/commit/%s\"]\n" "$1" "$3" "$2"
        }
        ;;
    * )
        render_node () {
            printf "\"%s\" [tooltip=\"%s\",]\n" "$1" "$3"
        }
        ;;
esac
   
# commit objects with parent1 and parent2
# FORMAT: commit $commit i $parent-index parent $parent
while read -r -a values
do for ((parent = 1; parent < ${#values[@]}; ++parent))
   do printf "commit %s i %d parent %s\n" "${values[0]}" "$parent" "${values[parent]}"
   done
done \
  < <("${git_log[@]}" --format="%h %p" "$@") \
  | sort -b > "$git_graphviz"/commits-parents.txt

# commits with summary description
# commit $commit-abbrev long $commit-long summary $summary
"${git_log[@]}" --format="commit %h long %H summary %cN <%cE> %cd %s" "$@" | sed -e 's/"/\\"/g' > "$git_graphviz"/commits-with-summaries.txt
# all hashes in the graph, sorted
cut -d ' ' -f 2 < "$git_graphviz"/commits-with-summaries.txt | sort -b > "$git_graphviz"/hashes.txt

# filter down the parent-child relationship to only where both parent & child
# are in the list of commits.
#
# sorting by commit, parent1, and parent2
sort -k 6b,6 "$git_graphviz"/commits-parents.txt > "$git_graphviz"/commits-parents.by-parent.txt
# get parent where the parent is also in the list of commits
# FORMAT: commit $commit i $parent-index parent $parent
join -1 6 -2 1 -o 1.1,1.2,1.3,1.4,1.5,1.6 "$git_graphviz"/commits-parents.by-parent.txt "$git_graphviz"/hashes.txt > "$git_graphviz"/included-commits-parents.txt

# decoration-style refs
if [[ true = ${decorate-false} ]]
then
  # # # # # # # # # # # # # # # # 
  # all heavyweight tags
  # FORMAT: tag $tag-object references $referenced-object
  git for-each-ref --format="%(objecttype) %(objectname:short) references %(*objectname:short)" refs/tags | sed -e '/^tag /p;d' > "$git_graphviz"/tag-objects.txt
  sort -k 4b,4 "$git_graphviz"/tag-objects.txt > "$git_graphviz"/tag-objects.by-referenced-object.txt
  sort -u -k 2b,2 "$git_graphviz"/tag-objects.txt > "$git_graphviz"/tag-objects.by-tag-object.txt

  # tags can point to tags, so we have to iteratively add tags until none more
  # get added
  while true
  do join -1 4 -2 1 -o 1.2 "$git_graphviz"/tag-objects.by-referenced-object.txt \
          "$git_graphviz"/hashes.txt > "$git_graphviz"/joined.txt
     cat "$git_graphviz"/joined.txt "$git_graphviz"/hashes.txt \
       | sort -b -u > "$git_graphviz"/updated-hashes.txt
     if diff -q "$git_graphviz"/hashes.txt "$git_graphviz"/updated-hashes.txt > /dev/null
     then break
     else mv "$git_graphviz"/updated-hashes.txt "$git_graphviz"/hashes.txt
     fi
  done
  mv "$git_graphviz"/updated-hashes.txt "$git_graphviz"/hashes.txt

  # join tag-object to hashes
  # FORMAT: tag $tag-object references $referenced-object
  join -1 2 -2 1 -o 1.1,1.2,1.3,1.4 "$git_graphviz"/tag-objects.by-tag-object.txt "$git_graphviz"/hashes.txt > "$git_graphviz"/included-tag-objects.txt

  # # # # # # # # # # # # # # # # 
  # all lightweight tags
  # FORMAT: name $tag-name references $referenced-object
  git for-each-ref --format="name %(refname:short) references %(objectname:short)" refs/tags \
    | sort -k 4b,4 > "$git_graphviz"/lightweight-tags.by-referenced-object.txt
  # join referenced objects to hashes
  # FORMAT: name $tag-name references $referenced-object
  join -1 4 -2 1 -o 1.1,1.2,1.3,1.4 "$git_graphviz"/lightweight-tags.by-referenced-object.txt "$git_graphviz"/hashes.txt > "$git_graphviz"/included-lightweight-tags.txt

  # # # # # # # # # # # # # # # # 
  # all refs: all branches & remotes
  # FORMAT: name $ref-name references $referenced-object
  git for-each-ref --format="name %(refname:short) references %(objectname:short)" refs/heads refs/remotes | sort -k 4b,4 > "$git_graphviz"/refs.by-referenced-object.txt
  # join refs.referenced-object to hashes
  # FORMAT: name $ref-name references $referenced-object
  join -1 4 -2 1 -o 1.1,1.2,1.3,1.4 "$git_graphviz"/refs.by-referenced-object.txt "$git_graphviz"/hashes.txt > "$git_graphviz"/included-refs.txt

  # # # # # # # # # # # # # # # # 
  # just the local HEAD
  # FORMAT: $ref-name
  git rev-parse --abbrev-ref HEAD > "$git_graphviz"/head.txt
  if [[ $(cat "$git_graphviz"/head.txt) == "HEAD" ]]
  then # detached HEAD state. head is just a commit, not a branch.
    git rev-parse --abbrev-ref HEAD > "$git_graphviz"/head.txt
    join -1 1 -2 1 -o 1.1 "$git_graphviz"/head.txt "$git_graphviz"/hashes.txt > "$git_graphviz"/included-head.txt
  else # HEAD points to a ref
      # sort included refs by name
      sort -k 2b,2 "$git_graphviz"/included-refs.txt > "$git_graphviz"/included-refs.by-name.txt
      # FORMAT: $ref-name
      join -1 1 -2 2 -o 1.1 "$git_graphviz"/head.txt "$git_graphviz"/included-refs.by-name.txt > "$git_graphviz"/included-head.txt
  fi
fi

{
    cat <<EOF
digraph git_graph {
    edge [fontname = "Helvetica", fontsize = 10];
    node [fontname = "Helvetica", fontsize = 10, width = 0, height = 0, shape=box, style=rounded];
EOF

    # commit $commit-abbrev long $commit-long summary $summary...
    while read -r L1 commit_abbrev L2 commit_long L3 summary
    do render_node "$commit_abbrev" "$commit_long" "$summary"
    done < "$git_graphviz"/commits-with-summaries.txt
    
    # FORMAT: commit $commit i $parent-index parent $parent
    while read -r Lcommit commit Li parent_index Lparent parent
    do
        case $parent_index in
            1 ) printf "\"%s\" -> \"%s\";\n" "$commit" "$parent";;
            * ) printf "\"%s\" -> \"%s\" [taillabel=\"%s\"];\n" "$commit" "$parent" "$parent_index";;
        esac
    done < "$git_graphviz"/included-commits-parents.txt
    
    if [[ true = ${decorate-false} ]]
    then


      cat <<EOF
node [shape=box, style=solid];
EOF
      
      sed -e 's/tag \([^ ]*\) references \(.*\)$/"\1" [label="tag:\1"];"\1" -> "\2";/' "$git_graphviz"/included-tag-objects.txt
      
      cat <<EOF
    node [shape=plaintext];
EOF

      sed -e 's/name \([^ ]*\) references \(.*\)$/"tag:\1" -> "\2";/' "$git_graphviz"/included-lightweight-tags.txt
      sed -e 's/name \([^ ]*\) references \(.*\)$/"\1" -> "\2";/' "$git_graphviz"/included-refs.txt
      sed -e 's/^\(.*\)$/"HEAD" -> "\1";/' "$git_graphviz"/included-head.txt

    fi
    
    cat <<EOF
}
EOF
} > "$git_graphviz"/graph.dot

dot -Tsvg -o"$git_graphviz"/graph.svg -Tcmapx -o"$git_graphviz"/graph.map "$git_graphviz"/graph.dot
base64 --wrap=0 "$git_graphviz"/graph.svg > "$git_graphviz"/graph.svg.base64

{
    cat <<EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <style type="text/css" media="all">
html {
  margin: 0;
  padding: 0;
}          
    </style>
    <title>Graphviz graph</title>
  </head>
  <body>
    <img src="data:image/svg+xml;base64,$(cat "$git_graphviz"/graph.svg.base64)" usemap="#git_graph"/>
EOF

    cat "$git_graphviz"/graph.map

    cat <<EOF
  </body>
</html>

EOF
} > "$git_graphviz"/graph.html

if [[ -n ${open+is-set} ]]
then
  OPEN_BIN=$(type -p open) || fail "program \"open\" not found"
  "$OPEN_BIN" "$git_graphviz"/graph.html
  read -t 3 -p 'press RETURN to exit, or wait'
else cat "$git_graphviz"/graph.html
fi
